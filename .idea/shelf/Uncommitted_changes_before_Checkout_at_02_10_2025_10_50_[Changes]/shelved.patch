Index: tests.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pytest\r\nfrom main import BooksCollector\r\n\r\n\r\nclass TestBooksCollector:\r\n\r\n    @pytest.fixture\r\n    def collector(self):\r\n        return BooksCollector()\r\n\r\n    def test_add_new_book_valid_and_invalid(self, collector):\r\n        \"\"\"Тестирование добавления книг с валидными и невалидными названиями\"\"\"\r\n        collector.add_new_book('Хроники Амбера')\r\n        assert 'Хроники Амбера' in collector.books_genre\r\n        assert collector.books_genre['Хроники Амбера'] == ''\r\n\r\n        collector.add_new_book('Хроники Амбера')\r\n        assert len(collector.books_genre) == 1\r\n\r\n        collector.add_new_book('')\r\n        collector.add_new_book('А' * 41)\r\n        assert '' not in collector.books_genre\r\n        assert 'А' * 41 not in collector.books_genre\r\n\r\n    def test_set_book_genre_scenarios(self, collector):\r\n        \"\"\"Тестирование установки жанра в различных сценариях\"\"\"\r\n        collector.add_new_book('Ложная слепота')\r\n        collector.set_book_genre('Ложная слепота', 'Фантастика')\r\n        assert collector.books_genre['Ложная слепота'] == 'Фантастика'\r\n\r\n        collector.set_book_genre('Несуществующая книга', 'Фантастика')\r\n        assert 'Несуществующая книга' not in collector.books_genre\r\n\r\n        collector.add_new_book('Город и город')\r\n        collector.set_book_genre('Город и город', 'Несуществующий жанр')\r\n        assert collector.books_genre['Город и город'] == ''\r\n\r\n    def test_get_book_genre_functionality(self, collector):\r\n        \"\"\"Тестирование получения жанра книги\"\"\"\r\n        collector.add_new_book('Песнь льда и пламени')\r\n        collector.add_new_book('Туманность Андромеды')\r\n\r\n        collector.set_book_genre('Песнь льда и пламени', 'Фантастика')\r\n        assert collector.get_book_genre('Песнь льда и пламени') == 'Фантастика'\r\n        assert collector.get_book_genre('Туманность Андромеды') == ''\r\n        assert collector.get_book_genre('Несуществующая') is None\r\n\r\n    def test_get_books_with_specific_genre(self, collector):\r\n        \"\"\"Тестирование фильтрации книг по жанру\"\"\"\r\n        collector.add_new_book('Ночной дозор')\r\n        collector.add_new_book('Дневной дозор')\r\n        collector.add_new_book('Убийство в Восточном экспрессе')\r\n\r\n        collector.set_book_genre('Ночной дозор', 'Фантастика')\r\n        collector.set_book_genre('Дневной дозор', 'Фантастика')\r\n        collector.set_book_genre('Убийство в Восточном экспрессе', 'Детективы')\r\n\r\n        fantasy_books = collector.get_books_with_specific_genre('Фантастика')\r\n        assert len(fantasy_books) == 2\r\n        assert 'Ночной дозор' in fantasy_books\r\n        assert 'Дневной дозор' in fantasy_books\r\n\r\n    def test_get_books_for_children_age_restriction(self, collector):\r\n        \"\"\"Тестирование фильтрации книг для детей\"\"\"\r\n        collector.add_new_book('Винни-Пух')\r\n        collector.add_new_book('Сияние')\r\n        collector.add_new_book('Убийство по алфавиту')\r\n        collector.add_new_book('Солярис')\r\n\r\n        collector.set_book_genre('Винни-Пух', 'Мультфильмы')\r\n        collector.set_book_genre('Сияние', 'Ужасы')\r\n        collector.set_book_genre('Убийство по алфавиту', 'Детективы')\r\n        collector.set_book_genre('Солярис', 'Фантастика')\r\n\r\n        children_books = collector.get_books_for_children()\r\n        assert 'Винни-Пух' in children_books\r\n        assert 'Солярис' in children_books\r\n        assert 'Сияние' not in children_books\r\n        assert 'Убийство по алфавиту' not in children_books\r\n\r\n    def test_add_to_favorites_functionality(self, collector):\r\n        \"\"\"Тестирование добавления книг в избранное\"\"\"\r\n        collector.add_new_book('Американские боги')\r\n        collector.add_new_book('Океан в конце дороги')\r\n\r\n        collector.add_book_in_favorites('Американские боги')\r\n        collector.add_book_in_favorites('Океан в конце дороги')\r\n        collector.add_book_in_favorites('Американские боги')  # Дубликат\r\n        collector.add_book_in_favorites('Несуществующая')  # Несуществующая\r\n\r\n        assert len(collector.favorites) == 2\r\n        assert 'Американские боги' in collector.favorites\r\n        assert 'Океан в конце дороги' in collector.favorites\r\n\r\n    def test_delete_from_favorites_functionality(self, collector):\r\n        \"\"\"Тестирование удаления книг из избранного\"\"\"\r\n        collector.add_new_book('Задверье')\r\n        collector.add_new_book('Сага о копье')\r\n\r\n        collector.add_book_in_favorites('Задверье')\r\n        collector.add_book_in_favorites('Сага о копье')\r\n\r\n        collector.delete_book_from_favorites('Задверье')\r\n        assert 'Задверье' not in collector.favorites\r\n        assert 'Сага о копье' in collector.favorites\r\n\r\n        collector.delete_book_from_favorites('Несуществующая')\r\n        assert len(collector.favorites) == 1\r\n\r\n    def test_get_list_of_favorites_books(self, collector):\r\n        \"\"\"Тестирование получения списка избранных книг\"\"\"\r\n        collector.add_new_book('Хоббит')\r\n        collector.add_new_book('Властелин колец')\r\n        collector.add_new_book('Сильмариллион')\r\n\r\n        collector.add_book_in_favorites('Хоббит')\r\n        collector.add_book_in_favorites('Властелин колец')\r\n\r\n        favorites = collector.get_list_of_favorites_books()\r\n        assert len(favorites) == 2\r\n        assert 'Хоббит' in favorites\r\n        assert 'Властелин колец' in favorites\r\n        assert 'Сильмариллион' not in favorites\r\n\r\n    def test_get_books_genre_method(self, collector):\r\n        \"\"\"Тестирование получения всего словаря книг\"\"\"\r\n        collector.add_new_book('Код да Винчи')\r\n        collector.add_new_book('Ангелы и демоны')\r\n        collector.set_book_genre('Код да Винчи', 'Детективы')\r\n\r\n        books_genre = collector.get_books_genre()\r\n        expected = {'Код да Винчи': 'Детективы', 'Ангелы и демоны': ''}\r\n        assert books_genre == expected\r\n\r\n    def test_initial_state_of_collector(self, collector):\r\n        \"\"\"Проверка начального состояния коллектора\"\"\"\r\n        assert collector.books_genre == {}\r\n        assert collector.favorites == []\r\n        assert len(collector.genre) == 5\r\n        assert len(collector.genre_age_rating) == 2\r\n\r\n    def test_empty_favorites_list(self, collector):\r\n        \"\"\"Тестирование пустого списка избранного\"\"\"\r\n        assert collector.get_list_of_favorites_books() == []\r\n\r\n        collector.add_new_book('Книга')\r\n        assert collector.get_list_of_favorites_books() == []\r\n\r\n    def test_comprehensive_workflow(self, collector):\r\n        \"\"\"Комплексный тест полного workflow приложения\"\"\"\r\n        books = ['Дракула', 'Франкенштейн', 'Кентервильское привидение']\r\n        for book in books:\r\n            collector.add_new_book(book)\r\n\r\n        collector.set_book_genre('Дракула', 'Ужасы')\r\n        collector.set_book_genre('Франкенштейн', 'Ужасы')\r\n        collector.set_book_genre('Кентервильское привидение', 'Комедии')\r\n\r\n        collector.add_book_in_favorites('Дракула')\r\n        collector.add_book_in_favorites('Кентервильское привидение')\r\n\r\n        assert collector.get_book_genre('Дракула') == 'Ужасы'\r\n        assert len(collector.get_books_with_specific_genre('Ужасы')) == 2\r\n        assert 'Кентервильское привидение' in collector.get_books_for_children()\r\n        assert len(collector.get_list_of_favorites_books()) == 2\r\n\r\n        collector.set_book_genre('Ночной дозор', 'Фантастика')\r\n        collector.set_book_genre('Дневной дозор', 'Фантастика')\r\n        collector.set_book_genre('Убийство в Восточном экспрессе', 'Детективы')\r\n\r\n        fantasy_books = collector.get_books_with_specific_genre('Фантастика')\r\n        assert len(fantasy_books) == 2\r\n        assert 'Ночной дозор' in fantasy_books\r\n        assert 'Дневной дозор' in fantasy_books\r\n\r\n    def test_get_books_for_children_age_restriction(self, collector):\r\n        \"\"\"Тестирование фильтрации книг для детей\"\"\"\r\n        collector.add_new_book('Винни-Пух')\r\n        collector.add_new_book('Сияние')\r\n        collector.add_new_book('Убийство по алфавиту')\r\n        collector.add_new_book('Солярис')\r\n\r\n        collector.set_book_genre('Винни-Пух', 'Мультфильмы')\r\n        collector.set_book_genre('Сияние', 'Ужасы')\r\n        collector.set_book_genre('Убийство по алфавиту', 'Детективы')\r\n        collector.set_book_genre('Солярис', 'Фантастика')\r\n\r\n        children_books = collector.get_books_for_children()\r\n        assert 'Винни-Пух' in children_books\r\n        assert 'Солярис' in children_books\r\n        assert 'Сияние' not in children_books\r\n        assert 'Убийство по алфавиту' not in children_books\r\n\r\n    def test_add_to_favorites_functionality(self, collector):\r\n        \"\"\"Тестирование добавления книг в избранное\"\"\"\r\n        collector.add_new_book('Американские боги')\r\n        collector.add_new_book('Океан в конце дороги')\r\n\r\n        collector.add_book_in_favorites('Американские боги')\r\n        collector.add_book_in_favorites('Океан в конце дороги')\r\n        collector.add_book_in_favorites('Американские боги')  # Дубликат\r\n        collector.add_book_in_favorites('Несуществующая')  # Несуществующая\r\n\r\n        assert len(collector.favorites) == 2\r\n        assert 'Американские боги' in collector.favorites\r\n        assert 'Океан в конце дороги' in collector.favorites\r\n\r\n    def test_delete_from_favorites_functionality(self, collector):\r\n        \"\"\"Тестирование удаления книг из избранного\"\"\"\r\n        collector.add_new_book('Задверье')\r\n        collector.add_new_book('Сага о копье')\r\n\r\n        collector.add_book_in_favorites('Задверье')\r\n        collector.add_book_in_favorites('Сага о копье')\r\n\r\n        collector.delete_book_from_favorites('Задверье')\r\n        assert 'Задверье' not in collector.favorites\r\n        assert 'Сага о копье' in collector.favorites\r\n\r\n        collector.delete_book_from_favorites('Несуществующая')\r\n        assert len(collector.favorites) == 1\r\n\r\n    def test_get_list_of_favorites_books(self, collector):\r\n        \"\"\"Тестирование получения списка избранных книг\"\"\"\r\n        collector.add_new_book('Хоббит')\r\n        collector.add_new_book('Властелин колец')\r\n        collector.add_new_book('Сильмариллион')\r\n\r\n        collector.add_book_in_favorites('Хоббит')\r\n        collector.add_book_in_favorites('Властелин колец')\r\n\r\n        favorites = collector.get_list_of_favorites_books()\r\n        assert len(favorites) == 2\r\n        assert 'Хоббит' in favorites\r\n        assert 'Властелин колец' in favorites\r\n        assert 'Сильмариллион' not in favorites\r\n\r\n    def test_get_books_genre_method(self, collector):\r\n        \"\"\"Тестирование получения всего словаря книг\"\"\"\r\n        collector.add_new_book('Код да Винчи')\r\n        collector.add_new_book('Ангелы и демоны')\r\n        collector.set_book_genre('Код да Винчи', 'Детективы')\r\n\r\n        books_genre = collector.get_books_genre()\r\n        expected = {'Код да Винчи': 'Детективы', 'Ангелы и демоны': ''}\r\n        assert books_genre == expected\r\n\r\n    def test_initial_state_of_collector(self, collector):\r\n        \"\"\"Проверка начального состояния коллектора\"\"\"\r\n        assert collector.books_genre == {}\r\n        assert collector.favorites == []\r\n        assert len(collector.genre) == 5\r\n        assert len(collector.genre_age_rating) == 2\r\n\r\n    def test_empty_favorites_list(self, collector):\r\n        \"\"\"Тестирование пустого списка избранного\"\"\"\r\n        assert collector.get_list_of_favorites_books() == []\r\n\r\n        collector.add_new_book('Книга')\r\n        assert collector.get_list_of_favorites_books() == []\r\n\r\n    def test_comprehensive_workflow(self, collector):\r\n        \"\"\"Комплексный тест полного workflow приложения\"\"\"\r\n        books = ['Дракула', 'Франкенштейн', 'Кентервильское привидение']\r\n        for book in books:\r\n            collector.add_new_book(book)\r\n\r\n        collector.set_book_genre('Дракула', 'Ужасы')\r\n        collector.set_book_genre('Франкенштейн', 'Ужасы')\r\n        collector.set_book_genre('Кентервильское привидение', 'Комедии')\r\n\r\n        collector.add_book_in_favorites('Дракула')\r\n        collector.add_book_in_favorites('Кентервильское привидение')\r\n\r\n        assert collector.get_book_genre('Дракула') == 'Ужасы'\r\n        assert len(collector.get_books_with_specific_genre('Ужасы')) == 2\r\n        assert 'Кентервильское привидение' in collector.get_books_for_children()\r\n        assert len(collector.get_list_of_favorites_books()) == 2
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tests.py b/tests.py
--- a/tests.py	(revision e60d549d846e48ae9d1ddf3adbee1129f849579a)
+++ b/tests.py	(date 1759384709896)
@@ -10,13 +10,16 @@
 
     def test_add_new_book_valid_and_invalid(self, collector):
         """Тестирование добавления книг с валидными и невалидными названиями"""
+        # Успешное добавление
         collector.add_new_book('Хроники Амбера')
         assert 'Хроники Амбера' in collector.books_genre
         assert collector.books_genre['Хроники Амбера'] == ''
 
+        # Дубликат
         collector.add_new_book('Хроники Амбера')
         assert len(collector.books_genre) == 1
 
+        # Невалидные названия
         collector.add_new_book('')
         collector.add_new_book('А' * 41)
         assert '' not in collector.books_genre
@@ -104,6 +107,7 @@
         assert 'Задверье' not in collector.favorites
         assert 'Сага о копье' in collector.favorites
 
+        # Удаление не из избранного
         collector.delete_book_from_favorites('Несуществующая')
         assert len(collector.favorites) == 1
 
@@ -148,130 +152,21 @@
 
     def test_comprehensive_workflow(self, collector):
         """Комплексный тест полного workflow приложения"""
+        # Добавление книг
         books = ['Дракула', 'Франкенштейн', 'Кентервильское привидение']
         for book in books:
             collector.add_new_book(book)
 
+        # Установка жанров
         collector.set_book_genre('Дракула', 'Ужасы')
         collector.set_book_genre('Франкенштейн', 'Ужасы')
         collector.set_book_genre('Кентервильское привидение', 'Комедии')
 
+        # Работа с избранным
         collector.add_book_in_favorites('Дракула')
         collector.add_book_in_favorites('Кентервильское привидение')
 
-        assert collector.get_book_genre('Дракула') == 'Ужасы'
-        assert len(collector.get_books_with_specific_genre('Ужасы')) == 2
-        assert 'Кентервильское привидение' in collector.get_books_for_children()
-        assert len(collector.get_list_of_favorites_books()) == 2
-
-        collector.set_book_genre('Ночной дозор', 'Фантастика')
-        collector.set_book_genre('Дневной дозор', 'Фантастика')
-        collector.set_book_genre('Убийство в Восточном экспрессе', 'Детективы')
-
-        fantasy_books = collector.get_books_with_specific_genre('Фантастика')
-        assert len(fantasy_books) == 2
-        assert 'Ночной дозор' in fantasy_books
-        assert 'Дневной дозор' in fantasy_books
-
-    def test_get_books_for_children_age_restriction(self, collector):
-        """Тестирование фильтрации книг для детей"""
-        collector.add_new_book('Винни-Пух')
-        collector.add_new_book('Сияние')
-        collector.add_new_book('Убийство по алфавиту')
-        collector.add_new_book('Солярис')
-
-        collector.set_book_genre('Винни-Пух', 'Мультфильмы')
-        collector.set_book_genre('Сияние', 'Ужасы')
-        collector.set_book_genre('Убийство по алфавиту', 'Детективы')
-        collector.set_book_genre('Солярис', 'Фантастика')
-
-        children_books = collector.get_books_for_children()
-        assert 'Винни-Пух' in children_books
-        assert 'Солярис' in children_books
-        assert 'Сияние' not in children_books
-        assert 'Убийство по алфавиту' not in children_books
-
-    def test_add_to_favorites_functionality(self, collector):
-        """Тестирование добавления книг в избранное"""
-        collector.add_new_book('Американские боги')
-        collector.add_new_book('Океан в конце дороги')
-
-        collector.add_book_in_favorites('Американские боги')
-        collector.add_book_in_favorites('Океан в конце дороги')
-        collector.add_book_in_favorites('Американские боги')  # Дубликат
-        collector.add_book_in_favorites('Несуществующая')  # Несуществующая
-
-        assert len(collector.favorites) == 2
-        assert 'Американские боги' in collector.favorites
-        assert 'Океан в конце дороги' in collector.favorites
-
-    def test_delete_from_favorites_functionality(self, collector):
-        """Тестирование удаления книг из избранного"""
-        collector.add_new_book('Задверье')
-        collector.add_new_book('Сага о копье')
-
-        collector.add_book_in_favorites('Задверье')
-        collector.add_book_in_favorites('Сага о копье')
-
-        collector.delete_book_from_favorites('Задверье')
-        assert 'Задверье' not in collector.favorites
-        assert 'Сага о копье' in collector.favorites
-
-        collector.delete_book_from_favorites('Несуществующая')
-        assert len(collector.favorites) == 1
-
-    def test_get_list_of_favorites_books(self, collector):
-        """Тестирование получения списка избранных книг"""
-        collector.add_new_book('Хоббит')
-        collector.add_new_book('Властелин колец')
-        collector.add_new_book('Сильмариллион')
-
-        collector.add_book_in_favorites('Хоббит')
-        collector.add_book_in_favorites('Властелин колец')
-
-        favorites = collector.get_list_of_favorites_books()
-        assert len(favorites) == 2
-        assert 'Хоббит' in favorites
-        assert 'Властелин колец' in favorites
-        assert 'Сильмариллион' not in favorites
-
-    def test_get_books_genre_method(self, collector):
-        """Тестирование получения всего словаря книг"""
-        collector.add_new_book('Код да Винчи')
-        collector.add_new_book('Ангелы и демоны')
-        collector.set_book_genre('Код да Винчи', 'Детективы')
-
-        books_genre = collector.get_books_genre()
-        expected = {'Код да Винчи': 'Детективы', 'Ангелы и демоны': ''}
-        assert books_genre == expected
-
-    def test_initial_state_of_collector(self, collector):
-        """Проверка начального состояния коллектора"""
-        assert collector.books_genre == {}
-        assert collector.favorites == []
-        assert len(collector.genre) == 5
-        assert len(collector.genre_age_rating) == 2
-
-    def test_empty_favorites_list(self, collector):
-        """Тестирование пустого списка избранного"""
-        assert collector.get_list_of_favorites_books() == []
-
-        collector.add_new_book('Книга')
-        assert collector.get_list_of_favorites_books() == []
-
-    def test_comprehensive_workflow(self, collector):
-        """Комплексный тест полного workflow приложения"""
-        books = ['Дракула', 'Франкенштейн', 'Кентервильское привидение']
-        for book in books:
-            collector.add_new_book(book)
-
-        collector.set_book_genre('Дракула', 'Ужасы')
-        collector.set_book_genre('Франкенштейн', 'Ужасы')
-        collector.set_book_genre('Кентервильское привидение', 'Комедии')
-
-        collector.add_book_in_favorites('Дракула')
-        collector.add_book_in_favorites('Кентервильское привидение')
-
+        # Проверка различных методов
         assert collector.get_book_genre('Дракула') == 'Ужасы'
         assert len(collector.get_books_with_specific_genre('Ужасы')) == 2
         assert 'Кентервильское привидение' in collector.get_books_for_children()
